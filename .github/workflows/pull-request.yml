name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  quick-checks:
    runs-on: ubuntu-latest
    name: Quick Validation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip
        tools: composer:v2

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Check syntax errors
      run: find . -name "*.php" -not -path "./vendor/*" -not -path "./node_modules/*" -exec php -l {} \;

    - name: Run Laravel Pint (Code Style)
      run: ./vendor/bin/pint --test

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: quick-checks
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: sekaijin_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip
        tools: composer:v2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install dependencies
      run: |
        composer install --no-progress --prefer-dist --optimize-autoloader
        npm ci

    - name: Build frontend assets
      run: npm run build

    - name: Setup environment
      run: |
        cp .env.testing.example .env.testing
        php artisan key:generate --env=testing
        cp .env.testing .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=sekaijin_test" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=root" >> .env

    - name: Prepare database
      run: |
        php artisan migrate --env=testing --force
        php artisan db:seed --env=testing --force

    - name: Run tests
      run: php artisan test --stop-on-failure

  security-check:
    runs-on: ubuntu-latest
    name: Security Audit
    needs: quick-checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip
        tools: composer:v2

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Security audit
      run: composer audit

    - name: Check for sensitive files
      run: |
        if [[ -f .env ]]; then
          echo "❌ .env file found in repository"
          exit 1
        fi
        if [[ -f .env.production ]]; then
          echo "❌ .env.production file found in repository"
          exit 1
        fi
        echo "✅ No sensitive files found"

  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests (Dusk)
    needs: quick-checks
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: sekaijin_dusk
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip
        tools: composer:v2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install dependencies
      run: |
        composer install --no-progress --prefer-dist --optimize-autoloader
        npm ci

    - name: Build frontend assets
      run: npm run build

    - name: Verify assets compilation
      run: |
        echo "=== CHECKING ASSETS COMPILATION ==="
        echo "Looking for compiled assets..."
        ls -la public/build/ || echo "No public/build/ directory found"
        ls -la public/build/assets/ 2>/dev/null || echo "No public/build/assets/ directory found"
        
        echo "Checking manifest file..."
        if [ -f "public/build/manifest.json" ]; then
          echo "✅ Manifest file exists"
          head -n 10 public/build/manifest.json
        else
          echo "❌ Manifest file missing"
        fi
        
        echo "Checking main CSS/JS files..."
        find public/build -name "*.css" | head -5
        find public/build -name "*.js" | head -5
        echo "=== END ASSETS CHECK ==="

    - name: Setup Dusk environment
      run: |
        cp .env.example .env
        cp .env.dusk.github .env.dusk.local
        php artisan key:generate

    - name: Verify MySQL service
      run: |
        echo "Checking MySQL service health..."
        mysql -h 127.0.0.1 -u root -proot -e "SELECT 1 as 'MySQL is ready';"

    - name: Create Dusk database
      run: |
        mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS sekaijin_dusk;"
        mysql -h 127.0.0.1 -u root -proot -e "GRANT ALL PRIVILEGES ON sekaijin_dusk.* TO 'root'@'%';"
        mysql -h 127.0.0.1 -u root -proot -e "SHOW DATABASES LIKE 'sekaijin_dusk';"

    - name: Run Dusk migrations
      run: php artisan migrate --env=dusk.local --force

    - name: Run Dusk seeders and verify data
      run: |
        echo "=== SEEDING DUSK DATABASE ==="
        php artisan db:seed --env=dusk.local --force
        
        echo "=== VERIFYING DATABASE CONTENT ==="
        php artisan tinker --execute="
        echo 'Total users: ' . \App\Models\User::count();
        echo 'Total countries: ' . \App\Models\Country::count();
        if (\App\Models\Country::count() > 0) {
          echo 'Countries: ' . \App\Models\Country::pluck('name_fr')->implode(', ');
        }
        " --env=dusk.local
        echo "=== END DATABASE VERIFICATION ==="

    - name: Install ChromeDriver
      run: php artisan dusk:chrome-driver

    - name: Make ChromeDriver executable
      run: chmod +x vendor/laravel/dusk/bin/chromedriver-linux

    - name: Start Laravel server
      run: php artisan serve --env=dusk.local &
      env:
        APP_URL: http://127.0.0.1:8000

    - name: Wait for server to be ready
      run: |
        echo "Waiting for Laravel server to start..."
        timeout 120 bash -c 'until curl -s http://127.0.0.1:8000 > /dev/null; do 
          echo "Server not ready yet, waiting..."
          sleep 2
        done'
        echo "✅ Server responds!"
        
        echo "=== DEBUGGING HOMEPAGE ==="
        homepage_content=$(curl -s http://127.0.0.1:8000)
        echo "Homepage status code: $(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000)"
        echo "First 500 chars of homepage:"
        echo "$homepage_content" | head -c 500
        echo ""
        echo "=== END HOMEPAGE DEBUG ==="
        
        echo "=== DEBUGGING LOGIN PAGE ==="
        login_content=$(curl -s http://127.0.0.1:8000/connexion)
        echo "Login page status code: $(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/connexion)"
        echo "First 500 chars of login page:"
        echo "$login_content" | head -c 500
        echo ""
        echo "=== END LOGIN DEBUG ==="
        
        echo "=== DEBUGGING REGISTRATION PAGE ==="
        register_content=$(curl -s http://127.0.0.1:8000/inscription)
        echo "Registration page status code: $(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/inscription)"
        echo "First 500 chars of registration page:"
        echo "$register_content" | head -c 500
        echo ""
        echo "=== END REGISTRATION DEBUG ==="
        
        echo "Testing database connectivity..."
        php artisan tinker --execute="echo 'DB test: ' . \App\Models\User::count() . ' users';" --env=dusk.local
        echo "✅ Database is accessible!"
        
        echo "Testing countries in database..."
        php artisan tinker --execute="echo 'Countries: ' . \App\Models\Country::count();" --env=dusk.local
        echo "✅ Countries check complete!"

    - name: Run Dusk tests
      run: php artisan dusk --env=dusk.local
      env:
        APP_URL: http://127.0.0.1:8000

    - name: Upload Dusk screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dusk-screenshots-pr
        path: tests/Browser/screenshots/
        retention-days: 3

    - name: Upload Dusk console logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: dusk-console-logs-pr
        path: tests/Browser/console/
        retention-days: 3
        
    - name: Debug Laravel logs
      if: failure()
      run: |
        echo "=== LARAVEL LOGS ==="
        if [ -f "storage/logs/laravel.log" ]; then
          tail -n 50 storage/logs/laravel.log
        else
          echo "No Laravel log file found"
        fi
        echo "=== END LARAVEL LOGS ==="

  pr-summary:
    runs-on: ubuntu-latest
    name: PR Summary
    needs: [quick-checks, unit-tests, security-check, e2e-tests]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 📊 Pull Request Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Quick Checks**: ${{ needs.quick-checks.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **E2E Tests (Dusk)**: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Check**: ${{ needs.security-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.quick-checks.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" && "${{ needs.security-check.result }}" == "success" ]]; then
          echo "### ✅ All checks passed! Ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Some checks failed. Please review and fix." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [View Tests](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Code Coverage](https://codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY