name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Laravel Application (PHP ${{ matrix.php }})
    
    strategy:
      matrix:
        php: ['8.1', '8.2']
        node: ['18', '20']

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: mbstring, dom, fileinfo, mysql, gd, zip
        tools: composer:v2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install PHP dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build frontend assets
      run: npm run build

    - name: Setup Laravel environment
      run: |
        cp .env.example .env
        php artisan key:generate

    - name: Check Laravel configuration
      run: |
        php artisan config:clear
        php artisan cache:clear
        php artisan view:clear

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip
        tools: composer:v2

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Run Laravel Pint (Code Style)
      run: ./vendor/bin/pint --test

    - name: Run PHPStan (Static Analysis)
      run: ./vendor/bin/phpstan analyse --memory-limit=2G
      continue-on-error: true

    - name: Check for security vulnerabilities
      run: composer audit
      continue-on-error: true

  deployment-ready:
    runs-on: ubuntu-latest
    name: Deployment Readiness
    needs: [build, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip
        tools: composer:v2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --no-progress --prefer-dist --optimize-autoloader --no-dev
        npm ci

    - name: Build production assets
      run: npm run build

    - name: Optimize Laravel
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

    - name: Check production readiness
      run: |
        echo "âœ… Production build completed successfully"
        echo "âœ… Code quality checks passed"
        echo "ðŸš€ Ready for deployment!"